
package BloodBankManagement;

//import com.mysql.cj.Session;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.*;

//New Import
import java.util.regex.Pattern;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import com.warrenstrange.googleauth.GoogleAuthenticator;
import com.warrenstrange.googleauth.GoogleAuthenticatorKey;
import com.warrenstrange.googleauth.GoogleAuthenticatorQRGenerator;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Properties;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;




import javax.swing.*;
import java.sql.*;
import java.util.Properties;
import java.util.regex.Pattern;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.*;
import javax.mail.internet.*;



/**
 *
 * @author souleymane.sono
 */
public class LoginPage extends javax.swing.JFrame {

    /**
     * Creates new form LoginPage
     */
    public LoginPage() {
        initComponents();
        //jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("./resources/blood.png")));
        //loginIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("./resources/login.png")));

    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        pane = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        loginUsername = new javax.swing.JTextField();
        loginPassword = new javax.swing.JPasswordField();
        Login = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        loginIcon = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(153, 0, 0));

        jLabel3.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 48)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("BLOOD BANK MANAGEMENT");
        jLabel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel3)
                .addGap(33, 33, 33)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(321, 321, 321)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(125, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 790, 830));

        pane.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel1.setText("Password:");

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel2.setText("Username:");

        loginUsername.setFont(new java.awt.Font("Book Antiqua", 0, 18)); // NOI18N

        loginPassword.setFont(new java.awt.Font("Book Antiqua", 0, 18)); // NOI18N

        Login.setBackground(new java.awt.Color(204, 0, 0));
        Login.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        Login.setForeground(new java.awt.Color(255, 255, 255));
        Login.setText("Login");
        Login.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LoginMouseClicked(evt);
            }
        });
        Login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 0, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Login");
        jLabel6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 0, 0), 2, true));

        javax.swing.GroupLayout paneLayout = new javax.swing.GroupLayout(pane);
        pane.setLayout(paneLayout);
        paneLayout.setHorizontalGroup(
            paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Login, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(paneLayout.createSequentialGroup()
                        .addGroup(paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(loginUsername)
                            .addComponent(loginPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE))))
                .addContainerGap(44, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115))
        );
        paneLayout.setVerticalGroup(
            paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneLayout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(Login, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        getContentPane().add(pane, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 460, 520, 310));

        loginIcon.setIcon(new javax.swing.ImageIcon("C:\\Users\\Souleymane\\Downloads\\Current\\BloodBankProject-master\\src\\resources\\pngegg (30).png")); // NOI18N
        getContentPane().add(loginIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 70, 520, 380));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 560, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 830, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 0, 560, 830));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginActionPerformed

        
        String usernameOrEmail = loginUsername.getText();
        String password = new String(loginPassword.getPassword());

        // Authenticate the user and get user credentials
        String authenticatedUser = authenticateUser(usernameOrEmail, password);

        if (authenticatedUser != null) {
            // Get the account status
            String accountStatus = getAccountStatus(usernameOrEmail);

            if (accountStatus == null) {
                JOptionPane.showMessageDialog(this, "Invalid username or email.");
            } else if (!"Active".equalsIgnoreCase(accountStatus)) {
                
                // Display specific messages based on account status
                switch (accountStatus.toLowerCase()) {
                    case "suspended":
                        JOptionPane.showMessageDialog(this, "Your account is suspended. Please contact support.");
                        break;
                    case "blocked":
                        JOptionPane.showMessageDialog(this, "Your account is blocked. Please contact support.");
                        break;
                    case "inactive":
                        JOptionPane.showMessageDialog(this, "Your account is inactive. Please activate your account.");
                        break;
                    default:
                        JOptionPane.showMessageDialog(this, "Your account status is: " + accountStatus + ". Please contact support.");
                        break;
                }
            } else {
                
                // If account is active, check if the password is temporary
                boolean isPasswordTemporary = checkAndUpdatePasswordIfTemporary(usernameOrEmail, password);
                if (isPasswordTemporary) {
                    String userRole = getUserRole(usernameOrEmail);
                    JOptionPane.showMessageDialog(this, "Your password is temporary. Please change it.");
                    // Redirect to password change screen or dialog
                     changePassword changePassDialog = new changePassword(usernameOrEmail, userRole);
                     changePassDialog.setVisible(true);
                    
                    
                    
                } else {
                    String userRole = getUserRole(usernameOrEmail);
                    // Generate and send 2FA code
                     String userEmail = getUserEmail(authenticatedUser, userRole);
                    String generatedCode = generate2FACode();
                    if (sendEmail(userEmail, generatedCode)) {
                         AppLogger.logWarning("2FA code sent to user: " + usernameOrEmail + " at " + java.time.LocalDateTime.now());
                        String inputCode = JOptionPane.showInputDialog(this, "Enter the 2FA code sent to your email:");

                        if (generatedCode.equals(inputCode)) {
                            JOptionPane.showMessageDialog(this, "Login successful!");
                            // Proceed to the next application screen based on user role
                            //String userRole = getUserRole(usernameOrEmail); // Fetch user role (Admin/Guest)
                            login(usernameOrEmail);
                            if (userRole != null) {
                                Menu menu = new Menu(userRole);
                                menu.setVisible(true);
                                this.dispose();
                            } else {
                                JOptionPane.showMessageDialog(this, "Invalid login. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
                                 AppLogger.logWarning("Failed login attempt for username/email: " + usernameOrEmail + " at " + java.time.LocalDateTime.now());
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Invalid 2FA code. Login failed.");
                             AppLogger.logWarning("Invalid 2FA Code : " + usernameOrEmail + " at " + java.time.LocalDateTime.now());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to send 2FA code. Please check your email configuration.");
                         AppLogger.logWarning("Email Outbound Issue: " + usernameOrEmail + " at " + java.time.LocalDateTime.now());
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid username or password.");
             AppLogger.logWarning("Credentials Errors " + usernameOrEmail + " at " + java.time.LocalDateTime.now());
        }



    
        
    }//GEN-LAST:event_LoginActionPerformed
    
    private String getStoredPasswordHash(String usernameOrEmail, String userRole) {
        //String userRole = getUserRole(usernameOrEmail, password);
        String passwordHash = null;
        String query = null; // Ensure query is initialized

        if ("Admin".equals(userRole)) {
            query = "SELECT password FROM admin WHERE Email = ? OR username = ?";
        } else if ("Guest User".equals(userRole)) {
            query = "SELECT password FROM GuestUser WHERE Email = ? OR username = ?";
        } else {
            System.out.println("Invalid user role: " + userRole);
            return null; // Exit if userRole is invalid
        }

        try (Connection con = getConnection(); PreparedStatement pst = con.prepareStatement(query)) {
            pst.setString(1, usernameOrEmail);
            pst.setString(2, usernameOrEmail);
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                passwordHash = rs.getString("password");
            } else {
                System.out.println("No user found with the provided username/email in " + userRole + " table.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return passwordHash;
    }


    public void changePassword(String usernameOrEmail) {
    // Create a dialog to change password with two input fields
        JDialog passwordChangeDialog = new JDialog(this, "Change Password", true);
        passwordChangeDialog.setLayout(new BoxLayout(passwordChangeDialog.getContentPane(), BoxLayout.Y_AXIS));

        JLabel passwordLabel = new JLabel("Enter New Password:");
        JPasswordField passwordField = new JPasswordField(20);
        passwordLabel.setAlignmentX(JLabel.CENTER_ALIGNMENT);

        JLabel confirmPasswordLabel = new JLabel("Confirm New Password:");
        JPasswordField confirmPasswordField = new JPasswordField(20);
        confirmPasswordLabel.setAlignmentX(JLabel.CENTER_ALIGNMENT);

        JButton sendButton = new JButton("Send");
        sendButton.setAlignmentX(JButton.CENTER_ALIGNMENT);

        // Add components to the dialog
        passwordChangeDialog.add(passwordLabel);
        passwordChangeDialog.add(passwordField);
        passwordChangeDialog.add(confirmPasswordLabel);
        passwordChangeDialog.add(confirmPasswordField);
        passwordChangeDialog.add(sendButton);

        // Set dialog size and make it visible
        passwordChangeDialog.setSize(300, 200);
        passwordChangeDialog.setLocationRelativeTo(this);
        passwordChangeDialog.setVisible(true);

        sendButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String newPassword = new String(passwordField.getPassword());
                String confirmPassword = new String(confirmPasswordField.getPassword());

                if (newPassword.equals(confirmPassword)) {
                    // Passwords match, proceed to update the password
                    updatePasswordInDatabase(usernameOrEmail, newPassword);
                    JOptionPane.showMessageDialog(passwordChangeDialog, "Password successfully changed!");
                    passwordChangeDialog.dispose(); // Close dialog after password change
                } else {
                    // Passwords do not match, show error message
                    JOptionPane.showMessageDialog(passwordChangeDialog, "Passwords do not match. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }
    
    
    public void updatePasswordInDatabase(String usernameOrEmail, String newPassword) {
        try {
            // Implement logic to update the password in the database
            // Ensure that the password is securely hashed before saving
            Connection conn = getConnection();
            PreparedStatement stmt = null;

            try {
                String updateQuery = "UPDATE users SET password = ? WHERE username = ?";
                stmt = conn.prepareStatement(updateQuery);
                stmt.setString(1, newPassword);  // Be sure to hash the password
                stmt.setString(2, usernameOrEmail);
                int rowsUpdated = stmt.executeUpdate();

                if (rowsUpdated > 0) {
                    // Successfully updated the password
                    System.out.println("Password updated successfully.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try {
                    if (stmt != null) stmt.close();
                    if (conn != null) conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
        
    public String getUserEmail(String usernameOrEmail, String userRole) {
        String email = null;
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // Establish database connection
            conn = getConnection(); // Assuming getConnection() returns a valid database connection

            String query = "";

            // Conditionally select the table based on userRole
            if ("Admin".equalsIgnoreCase(userRole)) {
                // SQL query to fetch the email from the Admin table
                query = "SELECT Email FROM admin WHERE username = ? OR Email = ?";
            } else if ("Guest User".equalsIgnoreCase(userRole)) {
                // SQL query to fetch the email from the GuestUser table
                query = "SELECT Email FROM GuestUser WHERE username = ? OR Email = ?";
            } else {
                // Handle any unexpected roles if needed
                throw new IllegalArgumentException("Invalid user role: " + userRole);
            }

            stmt = conn.prepareStatement(query);
            stmt.setString(1, usernameOrEmail);
            stmt.setString(2, usernameOrEmail);
            rs = stmt.executeQuery();

            // If a result is found, retrieve the email
            if (rs.next()) {
                email = rs.getString("Email");
            }
        } catch (SQLException e) {
            // Handle SQL exceptions
            System.err.println("SQL Error: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } catch (Exception e) {
            // Handle any other exceptions
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure resources are closed, even if an exception occurs
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                System.err.println("Error closing resources: " + e.getMessage());
                e.printStackTrace(); // Print stack trace for debugging
            }
        }
        System.out.println("the email is : "+email);

        return email;
        
    }
 
   

    public boolean checkAndUpdatePasswordIfTemporary(String usernameOrEmail, String password) {
        boolean isTemporary = false;

        String query = "SELECT password FROM TempPass WHERE username = ? OR Email = ?";
        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setString(1, usernameOrEmail);
            stmt.setString(2, usernameOrEmail);
            
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    // Retrieve stored hash and compare with provided password
                    String storedHash = rs.getString("password");
                    if (PasswordUtils.verifyPassword(password, storedHash)) {
                        isTemporary = true;
                    }
                }
            }

        } catch (SQLException e) {
            Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, "Database error: " + e.getMessage(), e);
        }

        return isTemporary;
    }

    
    private String authenticateUser(String usernameOrEmail, String password) {
        String query = "SELECT password FROM admin WHERE Email = ? OR username = ? " +
                       "UNION " +
                       "SELECT password FROM GuestUser WHERE Email = ? OR username = ?";

        try (Connection con = getConnection(); PreparedStatement pst = con.prepareStatement(query)) {
            pst.setString(1, usernameOrEmail);
            pst.setString(2, usernameOrEmail);
            pst.setString(3, usernameOrEmail);
            pst.setString(4, usernameOrEmail);

            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                // Retrieve the hashed password from the database
                String storedHash = rs.getString("password");

                // Verify the entered password by hashing it and comparing with the stored hash
                if (PasswordUtils.verifyPassword(password, storedHash)) {
                    return usernameOrEmail; // Return identifier on successful authentication
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage());
        }

        return null; // Return null if authentication fails
    }


   
    private String generate2FACode() {
        Random random = new Random();
        StringBuilder code = new StringBuilder();
        for (int i = 0; i < 6; i++) {
            code.append(random.nextInt(10));
        }
        return code.toString();
    }
    
    private boolean sendEmail(String toEmail, String code) {
        String host = "smtp.gmail.com";
        String from = "sonitopradafashion@gmail.com"; // Replace with your email i'am using mine here
        String password = "ovxs qcwg uumj huyo"; // Replace with your app password

        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", host);
        props.put("mail.smtp.port", "587");

        Session session = Session.getInstance(props, new Authenticator() {
            @Override
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(from, password);
            }
        });

        try {
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(from));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail));
            message.setSubject("Your 2FA Code");
            message.setText("Your 2FA code is: " + code);
            Transport.send(message);
            return true;
        } catch (MessagingException e) {
            JOptionPane.showMessageDialog(this, "Error sending email: " + e.getMessage());
            return false;
        }
    }
    
    private String hashPassword(String password) {
    // Call the static hashPassword method from PasswordUtils
        String encryptPass = PasswordUtils.hashPassword(password);
        System.out.println(encryptPass);
        return encryptPass;
    }
    
    private Connection getConnection() throws SQLException {
        String url = "jdbc:sqlserver://bloodbankdata.database.windows.net:1433;"
                   + "database=bloodBank;"
                   + "user=csiadmin@bloodbankdata;"
                   + "password=7ousRespo3!;"
                   + "encrypt=true;"
                   + "trustServerCertificate=false;"
                   + "hostNameInCertificate=*.database.windows.net;"
                   + "loginTimeout=30;";

        // Establish connection
        return DriverManager.getConnection(url);
    }
    
    private String getUserRole(String usernameOrEmail) {
        String role = null;
        String query = "SELECT 'Admin' AS role FROM admin WHERE Email = ? OR username = ? " +
                       "UNION " +
                       "SELECT 'Guest User' AS role FROM GuestUser WHERE Email = ? OR username = ?";

        try (Connection con = getConnection(); PreparedStatement pst = con.prepareStatement(query)) {
            pst.setString(1, usernameOrEmail);
            pst.setString(2, usernameOrEmail);
            pst.setString(3, usernameOrEmail);
            pst.setString(4, usernameOrEmail);

            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                role = rs.getString("role");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        return role;
    }

    
    private String getAccountStatus(String usernameOrEmail) {
        String accountStatus = null;
        String query = "SELECT accountStatus FROM admin WHERE Email = ? OR username = ? " +
                       "UNION " +
                       "SELECT accountStatus FROM GuestUser WHERE Email = ? OR username = ?";

        try (Connection con = getConnection(); PreparedStatement pst = con.prepareStatement(query)) {
            pst.setString(1, usernameOrEmail);
            pst.setString(2, usernameOrEmail);
            pst.setString(3, usernameOrEmail);
            pst.setString(4, usernameOrEmail);

            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                accountStatus = rs.getString("accountStatus");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        return accountStatus;
    }


    
    
    
    
    private void showError(String message) {
        JOptionPane.showMessageDialog(null, message, "Error", JOptionPane.ERROR_MESSAGE);
    }


   
    
    private boolean isValidPassword(String password) {
        // Check if password length is at least 12 characters
        if (password.length() < 12) {
            return false;
        }

        // Check if password contains at least one uppercase letter
        boolean hasUppercase = false;
        boolean hasLowercase = false;
        boolean hasDigit = false;
        boolean hasSymbol = false;

        for (int i = 0; i < password.length(); i++) {
            char c = password.charAt(i);
            if (Character.isUpperCase(c)) {
                hasUppercase = true;
            } else if (Character.isLowerCase(c)) {
                hasLowercase = true;
            } else if (Character.isDigit(c)) {
                hasDigit = true;
            } else if (!Character.isLetterOrDigit(c)) {
                hasSymbol = true;
            }
        }

        // Ensure all conditions are met
        return hasUppercase && hasLowercase && hasDigit && hasSymbol;
    }

    
    private void LoginMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LoginMouseClicked
        // TODO add your handling code here:
        //Menu mm = new Menu();
        //mm.setVisible(true);
      
    }//GEN-LAST:event_LoginMouseClicked
    
    
    public void login(String username) {
        // Logging login activity
        AppLogger.logInfo("User " + username + " logged in at " + java.time.LocalDateTime.now());
    }

    public void logout(String username) {
        // Logging logout activity
        AppLogger.logInfo("User " + username + " logged out at " + java.time.LocalDateTime.now());
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Login;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel loginIcon;
    private javax.swing.JPasswordField loginPassword;
    private javax.swing.JTextField loginUsername;
    private javax.swing.JPanel pane;
    // End of variables declaration//GEN-END:variables
}
