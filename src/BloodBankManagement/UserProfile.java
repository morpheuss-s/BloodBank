/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package BloodBankManagement;

import java.sql.*;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
/**
 *
 * @author Souleymane
 */
public class UserProfile extends javax.swing.JInternalFrame {

    /**
     * Creates new form DeleteUser
     */
    public UserProfile() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        searchLastname = new javax.swing.JTextField();
        find = new javax.swing.JButton();
        searchFirstname = new javax.swing.JTextField();
        Go = new javax.swing.JButton();
        firstname = new javax.swing.JLabel();
        lastname = new javax.swing.JLabel();
        uName = new javax.swing.JLabel();
        roles = new javax.swing.JLabel();
        Actions = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        no = new javax.swing.JLabel();
        lastname1 = new javax.swing.JLabel();
        username1 = new javax.swing.JLabel();
        Account = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(204, 0, 0));

        find.setText("Find");
        find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findActionPerformed(evt);
            }
        });

        Go.setText("GO");
        Go.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoActionPerformed(evt);
            }
        });

        firstname.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        firstname.setForeground(new java.awt.Color(255, 255, 255));
        firstname.setText("username");

        lastname.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lastname.setForeground(new java.awt.Color(255, 255, 255));
        lastname.setText("Lastname");

        uName.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        uName.setForeground(new java.awt.Color(255, 255, 255));
        uName.setText("username");

        roles.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        roles.setForeground(new java.awt.Color(255, 255, 255));
        roles.setText("Role");

        Actions.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Actions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Activate", "deactivate", "Block", "Unblock", "Admin", "Delete", " " }));

        jLabel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Actions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 18), new java.awt.Color(255, 255, 255))); // NOI18N

        no.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        no.setForeground(new java.awt.Color(255, 255, 255));
        no.setText("Firstname:");

        lastname1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lastname1.setForeground(new java.awt.Color(255, 255, 255));
        lastname1.setText("Lastname:");

        username1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        username1.setForeground(new java.awt.Color(255, 255, 255));
        username1.setText("username:");

        Account.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Account.setForeground(new java.awt.Color(255, 255, 255));
        Account.setText("Account Status:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Role:");

        jLabel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true));

        jLabel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Profile Management", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 24), new java.awt.Color(255, 255, 255))); // NOI18N

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Account Status:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(Actions, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)
                                .addComponent(searchLastname, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(65, 65, 65)
                                .addComponent(Go, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(305, 305, 305)
                                        .addComponent(firstname, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(115, 115, 115)
                                        .addComponent(lastname1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(60, 60, 60)
                                        .addComponent(lastname, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(115, 115, 115)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(115, 115, 115)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(95, 95, 95)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1020, 1020, 1020)
                                .addComponent(username1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1020, 1020, 1020)
                                .addComponent(no, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1210, 1210, 1210)
                                .addComponent(roles, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1210, 1210, 1210)
                                .addComponent(Account, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 960, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(searchFirstname, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(630, 630, 630)
                                .addComponent(find, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1210, 1210, 1210)
                                .addComponent(uName, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 15, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(370, 370, 370)
                .addComponent(Actions, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(searchLastname, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(533, 533, 533)
                .addComponent(Go, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(firstname, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lastname1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastname, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(120, 120, 120)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addComponent(username1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(no, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(360, 360, 360)
                .addComponent(roles, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addComponent(uName, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(300, 300, 300)
                .addComponent(Account, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(290, 290, 290)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(searchFirstname, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(find, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findActionPerformed
       String firstNameValue = searchFirstname.getText().trim();
        String lastNameValue = searchLastname.getText().trim();

        // Validate that both fields are not empty
        if (firstNameValue.isEmpty() || lastNameValue.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter both firstname and lastname.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Establish database connection
        String queryCheckAdmin = "SELECT * FROM Admin WHERE firstname = ? AND lastname = ?";
        String queryCheckGuestUser = "SELECT * FROM GuestUser WHERE firstname = ? AND lastname = ?";
        
        try (Connection con = DriverManager.getConnection("jdbc:sqlserver://bloodbankdata.database.windows.net:1433;database=bloodBank;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;", "csiadmin", "7ousRespo3!")) {
            PreparedStatement pstCheckAdmin = con.prepareStatement(queryCheckAdmin);
            PreparedStatement pstCheckGuestUser = con.prepareStatement(queryCheckGuestUser);
            
            pstCheckAdmin.setString(1, firstNameValue);
            pstCheckAdmin.setString(2, lastNameValue);
            pstCheckGuestUser.setString(1, firstNameValue);
            pstCheckGuestUser.setString(2, lastNameValue);

            ResultSet rsAdmin = pstCheckAdmin.executeQuery();
            ResultSet rsGuestUser = pstCheckGuestUser.executeQuery();
            
            if (rsAdmin.next()) {
                // User found in Admin table, populate fields
                populateUserDetails(rsAdmin, "Admin");
            } else if (rsGuestUser.next()) {
                // User found in GuestUser table, populate fields
                populateUserDetails(rsGuestUser, "GuestUser");
            } else {
                // No user found
                JOptionPane.showMessageDialog(null, "User not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
       
    
    }//GEN-LAST:event_findActionPerformed
    
    private void populateUserDetails(ResultSet rs, String userType) throws SQLException {
    // Get data from ResultSet and populate UI labels
            String firstName = rs.getString("firstname");
            String lastName = rs.getString("lastname");
            String usernameValue = rs.getString("username");
            String accountStatus = rs.getString("accountStatus");
            String role = rs.getString("role");

            // Set the text for each field
            firstname.setText(firstName);
            lastname.setText(lastName);
            uName.setText(usernameValue);
            Account.setText(accountStatus);
            roles.setText(role);

            // Optionally, you can set the combo box value based on account status (if needed)
            switch (accountStatus) {
                case "Active":
                    Actions.setSelectedItem("Activate");
                    break;
                case "Deactivated":
                    Actions.setSelectedItem("Deactivate");
                    break;
                case "Blocked":
                    Actions.setSelectedItem("Block");
                    break;
                default:
                    Actions.setSelectedItem("None");
                    break;
            }
    }
    
    private void GoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoActionPerformed
        
       
        // Get the selected action from the combo box
        String selectedAction = (String) Actions.getSelectedItem();

        // Get the username from the label (already populated from the Find button)
        String usernameValue = uName.getText();

        // Check if username is empty
        if (usernameValue.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please search for a user first.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Perform action based on the selected value from the combo box
        switch (selectedAction) {
            case "Activate":
                updateAccountStatus(usernameValue, "Active");
                break;
            case "Deactivate":
                updateAccountStatus(usernameValue, "Deactivated");
                break;
            case "Block":
                updateAccountStatus(usernameValue, "Blocked");
                break;
            case "Unblock":
                updateAccountStatus(usernameValue, "Active");
                break;
            case "Admin":
                upgradeToAdmin(usernameValue);
                break;
            case "Delete":
                deleteUser(usernameValue);
                break;
            case "None":
                JOptionPane.showMessageDialog(null, "No action selected.", "Error", JOptionPane.ERROR_MESSAGE);
                break;
            default:
                JOptionPane.showMessageDialog(null, "Invalid action.", "Error", JOptionPane.ERROR_MESSAGE);
        }  
    }//GEN-LAST:event_GoActionPerformed
    
    private void updateAccountStatus(String username, String status) {
        String queryUpdateStatus = "UPDATE admin SET accountStatus = ? WHERE username = ?";
        String queryUpdateStatusGuest = "UPDATE GuestUser SET accountStatus = ? WHERE username = ?";

        try (Connection con = DriverManager.getConnection("jdbc:sqlserver://bloodbankdata.database.windows.net:1433;database=bloodBank;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;", "csiadmin", "7ousRespo3!")) {
            // First try to update in Admin table
            PreparedStatement pstAdmin = con.prepareStatement(queryUpdateStatus);
            pstAdmin.setString(1, status);
            pstAdmin.setString(2, username);

            int rowsAffectedAdmin = pstAdmin.executeUpdate();

            // If no rows were affected in Admin table, try GuestUser table
            if (rowsAffectedAdmin == 0) {
                PreparedStatement pstGuestUser = con.prepareStatement(queryUpdateStatusGuest);
                pstGuestUser.setString(1, status);
                pstGuestUser.setString(2, username);
                pstGuestUser.executeUpdate();
            }

            JOptionPane.showMessageDialog(null, "Account status updated to: " + status, "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void upgradeToAdmin(String username) {
        String queryUpgrade = "INSERT INTO admin (username, firstName, lastName, email, telephone, role, accountStatus) "
                + "SELECT username, firstName, lastName, email, telephone, 'Admin', 'Active' FROM GuestUser WHERE username = ?";

        String queryDeleteGuestUser = "DELETE FROM GuestUser WHERE username = ?";

        try (Connection con = DriverManager.getConnection("jdbc:sqlserver://bloodbankdata.database.windows.net:1433;database=bloodBank;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;", "csiadmin", "7ousRespo3!")) {
            // Move the user data from GuestUser to Admin
            PreparedStatement pstUpgrade = con.prepareStatement(queryUpgrade);
            pstUpgrade.setString(1, username);

            int rowsAffectedUpgrade = pstUpgrade.executeUpdate();

            // If the upgrade was successful, delete the user from GuestUser table
            if (rowsAffectedUpgrade > 0) {
                PreparedStatement pstDelete = con.prepareStatement(queryDeleteGuestUser);
                pstDelete.setString(1, username);
                pstDelete.executeUpdate();
                JOptionPane.showMessageDialog(null, "User upgraded to Admin.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "User not found in GuestUser table.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    private void deleteUser(String username) {
        String queryDeleteAdmin = "DELETE FROM admin WHERE username = ?";
        String queryDeleteGuestUser = "DELETE FROM GuestUser WHERE username = ?";

        try (Connection con = DriverManager.getConnection("jdbc:sqlserver://bloodbankdata.database.windows.net:1433;database=bloodBank;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;", "csiadmin", "7ousRespo3!")) {
            // Try to delete from Admin table first
            PreparedStatement pstAdminDelete = con.prepareStatement(queryDeleteAdmin);
            pstAdminDelete.setString(1, username);
            int rowsAffectedAdmin = pstAdminDelete.executeUpdate();

            // If no rows were deleted from Admin, try deleting from GuestUser
            if (rowsAffectedAdmin == 0) {
                PreparedStatement pstGuestUserDelete = con.prepareStatement(queryDeleteGuestUser);
                pstGuestUserDelete.setString(1, username);
                pstGuestUserDelete.executeUpdate();
            }

            JOptionPane.showMessageDialog(null, "User deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Account;
    private javax.swing.JComboBox<String> Actions;
    private javax.swing.JButton Go;
    private javax.swing.JButton find;
    private javax.swing.JLabel firstname;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lastname;
    private javax.swing.JLabel lastname1;
    private javax.swing.JLabel no;
    private javax.swing.JLabel roles;
    private javax.swing.JTextField searchFirstname;
    private javax.swing.JTextField searchLastname;
    private javax.swing.JLabel uName;
    private javax.swing.JLabel username1;
    // End of variables declaration//GEN-END:variables
}
